<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_Ship_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////// start ///////

//debug
global.player1color=c_white; // can customize ship color, because why not? // bitch's love customization //
v_direction=0;

//ships stats
v_health=10; v_health_max=v_health;
shield_power=5;
shoot_speed=.3;

//set ship max speed
ship_speed=8;
ship_friction=1;

//analog variables // these you can change up //
ddevice=0; //intialize "device"
analog_width=150; //currently, its setup to be a square, with the virtual keypad being the same size, so changing JUST this changes the size of both the analog and shoot button //
analog_height=analog_width;
analog_x=35;
analog_y=view_hview-analog_height-35;
analog_direction=0;
analog_distance=0;
 point_x=(analog_width+analog_x)+analog_distance*(cos(analog_direction*pi/180)); // some basic starting math // yay trig //
 point_y=(analog_height+analog_y)+analog_distance*(sin(analog_direction*pi/180)); // just kidding I hate trig //
 device_used=-1; //checks for holding, even if out of 'bounds'
 analog_direction_ship=0; //for ship
 deadzone=5; //deadzone
 
 
 control_type=0; //0=touch+analog, 1=keyboard //normally 1 as default, so its always a keyboard, unless its running the android platform or iOS //I set it to 0 to show the analog, for debug reasons, for windows too
 if(os_type == os_android or os_type == os_ios){control_type=0;}
 
//virtual key settings // These you can change up // 
virtual_width=analog_width; 
virtual_height=virtual_width;
virtual_x=view_wport-virtual_width-35;
virtual_y=view_hport-virtual_height-35;
global.virtual_space=virtual_key_add(virtual_x,virtual_y,virtual_width,virtual_height,vk_enter);

//shooting timer
can_shoot=0;
v_timer=0;
v_t=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///// shooting timer ////

if(can_shoot=0){v_timer+=1;}
v_t=v_timer/60;

if(v_t&gt;shoot_speed){can_shoot=1;} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////// Keyboard /////////

if(control_type=1){
 if!(keyboard_check(ord('W')) or keyboard_check(ord('A')) or keyboard_check(ord('S')) or keyboard_check(ord('D'))){ if(speed&gt;0){speed-=1; if(speed&lt;0){speed=0;}}}else{speed=8;}
 if(x&lt;view_xview){x+=speed;}if(x&gt;view_xview+view_wport){x-=speed;}
 if(y&lt;view_yview){y+=speed;}if(y&gt;view_yview+view_hport){y-=speed;}

 if(keyboard_check(ord('W'))){ direction=90; }
 if(keyboard_check(ord('A'))){ direction=180; }
 if(keyboard_check(ord('S'))){ direction=270; }
 if(keyboard_check(ord('D'))){ direction=0; }
 
 if(keyboard_check(ord('W')) and keyboard_check(ord('A'))){ direction=135; }
 if(keyboard_check(ord('A')) and keyboard_check(ord('S'))){ direction=225; }
 if(keyboard_check(ord('S')) and keyboard_check(ord('D'))){ direction=315; }
 if(keyboard_check(ord('D')) and keyboard_check(ord('W'))){ direction=45; }
 
  if(keyboard_check(ord('W')) and keyboard_check(ord('S'))){ direction=0; speed=0; }
  if(keyboard_check(ord('A')) and keyboard_check(ord('D'))){ direction=0; speed=0; }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////// health control ////
if(v_health&lt;0){show_message("You've died!!"); game_restart();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////shoot///////
if(can_shoot=1){ can_shoot=0;

if(sprite_index=s_Ship_2){ //only shoot if its the correct ship

//bullet 1 (left bullet)
 point_x=(x-10)+1*(cos(v_direction*pi/180)); //find x value, adjust 1*... to set the distance from the ship
 point_y=(y-sprite_width/2)+1*(sin(v_direction*pi/180)); //find y value
zz=instance_create(point_x,point_y,o_Player_Bullet); //shoot and assign bullet to zz
zz.direction=v_direction; //decide direction of bullet, based off where ship is facing

//bullet 2 (right bullet)
 point_x=(x+10)+1*(cos(v_direction*pi/180));
 point_y=(y+sprite_width/2)+1*(sin(v_direction*pi/180));
zz=instance_create(point_x,point_y,o_Player_Bullet); 
zz.direction=v_direction;

v_timer=0; //set timer to 0
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//////// Analog Stick Math ///////////


//resets analog stick
if(control_type=0){
analog_distance=0;
 point_x=(analog_x+analog_width/2)+analog_distance*(cos(analog_direction*pi/180))+view_xview;
 point_y=(analog_y+analog_height/2)+analog_distance*(sin(analog_direction*pi/180))+view_yview;

//check for if the finger is still being held for the analog
 if (!device_mouse_check_button(device_used,mb_left)){
 device_used=-1;
 }

//analog stick equations
for(ddevice=0;ddevice&lt;=4;ddevice+=1){
 if (device_mouse_check_button(ddevice,mb_left) and  (device_mouse_x(ddevice)&gt;analog_x+view_xview-deadzone and device_mouse_y(ddevice)&gt;analog_y+view_yview-deadzone and device_mouse_x(ddevice)&lt;analog_x+analog_width+view_xview+deadzone and device_mouse_y(ddevice)&lt;analog_y+analog_height+view_yview+deadzone) or device_used=ddevice){
 device_used=ddevice;
 //math behind distance and direction
 analog_direction = radtodeg(arctan2((device_mouse_y(ddevice)-(analog_y+view_yview+analog_height/2)),(device_mouse_x(ddevice)-(analog_x+view_xview+analog_width/2)+.000001)));
   analog_direction_ship = radtodeg(arctan2(-(device_mouse_y(ddevice)-(analog_y+view_yview+analog_height/2)),(device_mouse_x(ddevice)-(analog_x+view_xview+analog_width/2)+.000001)));
 analog_distance = sqrt(sqr(device_mouse_x(ddevice)-(analog_x+view_xview+analog_width/2))+sqr(device_mouse_y(ddevice)-(analog_y+view_yview+analog_height/2)));;

 //sets deadzone for the analog stick
 if(analog_distance&gt;analog_width/2){analog_distance=analog_width/2;}
 if(analog_distance&lt;-analog_width/2){analog_distance=analog_width/2;}
 
 //points where the stick is
 point_x=(analog_x+analog_width/2)+analog_distance*(cos(analog_direction*pi/180))+view_xview;
 point_y=(analog_y+analog_height/2)+analog_distance*(sin(analog_direction*pi/180))+view_yview;
 
 
 /// control ship
direction=analog_direction_ship;
speed=(analog_distance/(analog_width/2))*ship_speed;
 }

  if(os_type==os_win32 || os_type==os_linux || os_type==os_macosx){
  if (device_mouse_check_button(ddevice,mb_left) and  device_mouse_x(ddevice)&gt;virtual_x/2 and device_mouse_y(ddevice)&gt;virtual_y/2 and  device_mouse_x(ddevice)&lt;(virtual_x+virtual_width)*1.5 and device_mouse_y(ddevice)&lt;(virtual_y+virtual_height)*1.5){
  event_perform(ev_keyboard,vk_space);
 }}

}
///////////////// End Analog Stick ///////////////////////

//friction for ship
if((analog_distance/(analog_width/2))*ship_speed&lt;1 and speed&gt;0){speed-=ship_friction; if(speed&lt;0){speed=0;}} 


 if(x&lt;view_xview){x+=speed;}if(x&gt;view_xview+view_wport){x-=speed;}
 if(y&lt;view_yview){y+=speed;}if(y&gt;view_yview+view_hport){y-=speed;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////// draw ship ////
draw_sprite_ext(sprite_index,0,x,y,1,1,v_direction+270,global.player1color,1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///// Analog Stick Drawing ///////

if(control_type=0){
//draw box behind stick
draw_set_alpha(.4);
draw_set_color(c_dkgray);draw_rectangle(analog_x+view_xview,analog_y+view_yview,analog_x+analog_width+view_xview,analog_y+analog_height+view_yview,false);
draw_set_color(c_black);draw_rectangle(analog_x+view_xview,analog_y+view_yview,analog_x+analog_width+view_xview,analog_y+analog_height+view_yview,true);
draw_circle(analog_x+view_xview+analog_width/2,analog_y+view_yview+analog_height/2,analog_width/2,true);

//draw analog stick
draw_set_alpha(.7);
draw_line_width((analog_x+analog_width/2)+view_xview,(analog_y+analog_height/2)+view_yview,point_x,point_y,4);
draw_set_color(c_dkgray);draw_circle(point_x,point_y,analog_width/3,false);
draw_set_color(c_white);draw_circle(point_x,point_y,analog_width/3,true);
draw_circle(point_x,point_y,analog_width/5,true);draw_circle(point_x,point_y,analog_width/10,true);

/*debug
draw_set_color(c_white); draw_set_alpha(1);
draw_text(25,25,"direction "+string(analog_direction));
draw_text(25,40,"distance "+string(analog_distance));
draw_text(25,55,"speed: "+string((analog_distance/(analog_width/2))*ship_speed));
draw_text(25,70,"speed2: "+string(speed));*/
////////////////// End Analog Stick ///////////////////////////

//draw virtual key//

if(!instance_exists(o_Analog_2)){
draw_set_alpha(.4);
draw_set_color(c_dkgray); if(keyboard_check(vk_space) or keyboard_check(vk_enter)){draw_set_color(c_white);}
draw_rectangle(virtual_x+view_xview,virtual_y+view_yview,virtual_x+virtual_width+view_xview,virtual_y+virtual_height+view_yview,false);
draw_set_color(c_black);draw_rectangle(virtual_x+view_xview,virtual_y+view_yview,virtual_x+virtual_width+view_xview,virtual_y+virtual_height+view_yview,true);draw_set_alpha(.9);
draw_set_color(c_white); draw_set_halign(fa_center); draw_set_valign(fa_center); draw_text(virtual_x+view_xview+virtual_width/2,virtual_y+view_yview+virtual_height/2,"Shoot!"); draw_set_halign(fa_left);  draw_set_valign(fa_top);}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////// draw UI /////

//draw ship healthbar
draw_rectangle_color(view_xview+10,view_yview+10,view_xview+10+(v_health/v_health_max)*250,view_yview+25,c_red,c_green,c_green,c_red,false);
draw_set_color(c_black);draw_rectangle(view_xview+10,view_yview+10,view_xview+260,view_yview+25,true);

//draw ship shooting recharge bar//
draw_rectangle_color(view_xview+15,view_yview+30,view_xview+15+(v_t/shoot_speed)*65,view_yview+45,c_blue,c_gray,c_gray,c_blue,false);
draw_set_color(c_black);draw_rectangle(view_xview+15,view_yview+30,view_xview+80,view_yview+45,true);


//draw debug
draw_set_color(c_white);
o_cc=0;
with(all){o_Player.o_cc+=1;}
draw_text(55+view_xview,150+view_yview,"Objects: " + string(o_cc));
//draw_set_color(c_black);

draw_text(55+view_xview,170+view_yview,"MouseX: " + string(device_mouse_x(device_used)));
draw_text(55+view_xview,190+view_yview,"MouseY: " + string(device_mouse_x(device_used)));
draw_text(55+view_xview,210+view_yview,"MouseXRaw: " + string(device_mouse_raw_x(device_used)));
draw_text(55+view_xview,230+view_yview,"MouseYRaw: " + string(device_mouse_raw_y(device_used)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
